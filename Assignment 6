#include<bits/stdc++.h>
using namespace std;
void swap(int *x,int *y)
{
    int temp=*x;
    *x=*y;
    *y=temp;
}
class heap
{
private:
    int *max_heap;
    int capacity;
    int hsize;
public:
    heap(int c)
     {
         capacity=c;
         max_heap=new int[c];
         hsize=0;
     }
     void insert(int item);
     void heapify(int);
     int extractmax();
     int gethsize()
     {
         return hsize;
     }
};
void heap::insert(int item)
{
    if(hsize==capacity)
        return;
    hsize++;
    int i=hsize-1;
    max_heap[i]=item;
    while(i!=0&&max_heap[i]>max_heap[(i-1)/2])
    {
        swap(&max_heap[i],&max_heap[(i-1)/2]);
        i=(i-1)/2;
    }
}
void heap::heapify(int i)
{
    int l,r,m;
    l=2*i+1;
    r=2*i+2;
    m=i;
    if(l<hsize&&max_heap[l]>max_heap[i])
        m=l;
    if(r<hsize&&max_heap[r]>max_heap[m])
        m=r;
    if(m!=i)
    {
        swap(&max_heap[i],&max_heap[m]);
        heapify(m);
    }
}
int heap::extractmax()
{
    if(hsize==0)
        return -1;
    int root=max_heap[0];
    max_heap[0]=max_heap[hsize-1];
    hsize--;
    heapify(0);
    return root;
}
int main()
{
   int n;
   cin>>n;
   heap pqueue(n);
   int i,num;
   for(i=0;i<n;i++)
   {
       cin>>num;
       pqueue.insert(num);
       if(pqueue.gethsize()<=2)
         cout<<-1<<endl;
       else
       {
           int m1,m2,m3;
           m1=pqueue.extractmax();
           m2=pqueue.extractmax();
           m3=pqueue.extractmax();
           cout<<m1*m2*m3<<endl;
           pqueue.insert(m1);
           pqueue.insert(m2);
           pqueue.insert(m3);
       }
   }
   return 0;
}
