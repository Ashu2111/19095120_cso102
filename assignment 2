#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct stack
{
  int top;
  char *arr;
}s;
int j=-1;
char *q;

void push_arr(char);
char pop_arr();
void push_q(char);
int prcd(char,char);

int main()
{
    char a[1000],b[100];
    a[0]='\0';
    int n,count=0;
    scanf("%d",&n);
    for(int k=0;k<=n;k++)
    {
        char ch,ch1,t;
        int l;
        j=-1;
        char p[100];
        gets(p);
        s.top=0;
        for(l=0;p[l]!='\0';l++);
        b[count++]=l;
        s.arr=(char *)malloc(l*sizeof(char));
        q=(char *)malloc(l*sizeof(char));
        s.arr[0]='(';
        p[l]=')';

        p[++l]='\0';
        for(int i=0;p[i]!='\0';i++)
        {
           if(p[i]=='(')
            push_arr(p[i]);
           else if(p[i]>=48&&p[i]<=57)
            push_q(p[i]);
           else if(p[i]==')')
           {
               while(s.arr[s.top]!='(')
               {
                 ch=pop_arr();
                 push_q(ch);
               }
               t=pop_arr();
           }
           else
           {
              if(s.arr[s.top]=='(')
                push_arr(p[i]);
              else
                {
                    if(prcd(p[i],s.arr[s.top])==1)
                    {
                        ch1=pop_arr();
                        push_q(ch1);
                        if(prcd(p[i],s.arr[s.top])==1)
                        {
                           ch1=pop_arr();
                           push_q(ch1);
                           push_arr(p[i]);
                        }
                        else
                           push_arr(p[i]);
                    }
                    else
                        push_arr(p[i]);
                }
           }
      }
     q[++j]='\0';
     strcat(a,q);
  }
     int m=0,sum=0;
     for(int i=0;i<count;i++)
       {
           sum+=b[i];
           for(;m<sum;m++)
           printf("%c",a[m]);
           printf("\n");
       }
  return 0;
}
void push_arr(char c)
{
     s.arr[++s.top]=c;
}
char pop_arr()
{
    char temp;
    temp=s.arr[s.top--];
    return temp;
}
void push_q(char sym)
{
    q[++j]=sym;
}
int prcd(char op1,char op2)
{
    if((op1=='+'&&op2=='+')||(op1=='-'&&op2=='-')||(op1=='*'&&op2=='*')||(op1=='/'&&op2=='/'))
        return 1;
    else if((op1=='/'&&op2=='*')||(op1=='*'&&op2=='/')||(op1=='+'&&op2=='-')||(op1=='-'&&op2=='+'))
        return 1;
    else if((op1=='+'&&op2=='/')||(op1=='-'&&op2=='/')||(op1=='+'&&op2=='*')||(op1=='-'&&op2=='*'))
        return 1;
    else if((op1=='/'&&op2=='+')||(op1=='/'&&op2=='-')||(op1=='*'&&op2=='+')||(op1=='*'&&op2=='-'))
        return 0;
}
